[uwsgi]
strict = true
plugins = tuntap,quota,eventfd,console_broadcast

vassal-inherit = /opt/unbit/uwsgi/shortcuts.ini

auto-procname = true
procname-prefix-spaced = [{{container.uid}}]

; set HOME
hook-asap = putenv:HOME=/containers/{{container.uid}}
; set quota
hook-asap = setquota:{{container.server.hd}} {{container.uid}} {{container.quota}}

; create home
if-not-dir = /containers/{{container.uid}}
hook-asap = mkdir:/containers/{{container.uid}}
endif =
; chown2 does not call getpwnam/getgrnam
hook-asap = chown2:/containers/{{container.uid}} {{container.uid}} {{container.uid}}

; create /run
if-not-dir = /containers/{{container.uid}}/run
hook-asap = mkdir:/containers/{{container.uid}}/run
endif =
hook-asap = chown:/containers/{{container.uid}}/run {{container.uid}} {{container.uid}}
; create /run/resolvconf
if-not-dir = /containers/{{container.uid}}/run/resolvconf
hook-asap = mkdir:/containers/{{container.uid}}/run/resolvconf
endif =

; create cgroup context
if-not-dir = /sys/fs/cgroup/{{container.uid}}
hook-asap = mkdir:/sys/fs/cgroup/{{container.uid}}
endif =

; set cgroup limits
hook-asap = write:/sys/fs/cgroup/{{container.uid}}/memory.limit_in_bytes {{container.memory_limit_in_bytes}}
hook-asap = write:/sys/fs/cgroup/{{container.uid}}/memory.swappiness 0

; create /run/subscribe
if-not-dir = /containers/{{container.uid}}/run/subscribe
hook-asap = mkdir:/containers/{{container.uid}}/run/subscribe
endif =

; create /run/cgroup
if-not-dir = /containers/{{container.uid}}/run/cgroup
hook-asap = mkdir:/containers/{{container.uid}}/run/cgroup
endif =

; place process in the cgroup
cgroup = /sys/fs/cgroup/{{container.uid}}/

; create vassals directory
if-not-dir = /containers/{{container.uid}}/vassals
hook-asap = mkdir:/containers/{{container.uid}}/vassals
endif =
hook-asap = chown:/containers/{{container.uid}}/vassals {{container.uid}} {{container.uid}}

; commodity directory for having a /container/<uid>
if-not-dir = /containers/{{container.uid}}/.old_root
hook-asap = mkdir:/containers/{{container.uid}}/.old_root
endif =
if-not-dir = /containers/{{container.uid}}/.old_root/{{container.uid}}
hook-asap = mkdir:/containers/{{container.uid}}/.old_root/{{container.uid}}
endif =
hook-asap = chown:/containers/{{container.uid}}/.old_root {{container.uid}} {{container.uid}}
hook-asap = chown:/containers/{{container.uid}}/.old_root/{{container.uid}} {{container.uid}} {{container.uid}}


; create /tmp
if-not-dir = /containers/{{container.uid}}/tmp
hook-asap = mkdir:/containers/{{container.uid}}/tmp
endif =
hook-asap = chown:/containers/{{container.uid}}/tmp {{container.uid}} {{container.uid}}

; create /logs
if-not-dir = /containers/{{container.uid}}/logs
hook-asap = mkdir:/containers/{{container.uid}}/logs
endif =
hook-asap = chown:/containers/{{container.uid}}/logs {{container.uid}} {{container.uid}}

; create /etc
if-not-dir = /containers/{{container.uid}}/etc
hook-asap = mkdir:/containers/{{container.uid}}/etc
endif =
hook-asap = chown:/containers/{{container.uid}}/etc {{container.uid}} {{container.uid}}
; /etc/hosts
if-not-file = /containers/{{container.uid}}/etc/hosts
{% for host in container.server.etc_hosts_lines %}
hook-asap = appendn:/containers/{{container.uid}}/etc/hosts {{host}}
{% endfor %}
endif = 
hook-asap = chown:/containers/{{container.uid}}/etc/hosts {{container.uid}} {{container.uid}}
; /etc/resolv.conf
if-not-file = /containers/{{container.uid}}/etc/resolv.conf
{% for line in container.server.etc_resolv_conf_lines %}
hook-asap = appendn:/containers/{{container.uid}}/etc/resolv.conf {{line}}
{% endfor %}
endif =
hook-asap = chown:/containers/{{container.uid}}/etc/resolv.conf {{container.uid}} {{container.uid}}
; /etc/hostname
hook-asap = writen:/containers/{{container.uid}}/etc/hostname {{container.hostname}}
hook-asap = chown:/containers/{{container.uid}}/etc/hostname {{container.uid}} {{container.uid}}

; etc/uwsgi.key and etc/uwsgi.pubkey (reset them at every container restart)
if-file = /containers/{{container.uid}}/etc/uwsgi.key
hook-asap = unlink:/containers/{{container.uid}}/etc/uwsgi.key
endif = 
{% for line in container.customer.rsa_key_lines %}
hook-asap = !appendn:/containers/{{container.uid}}/etc/uwsgi.key {{line}}
{% endfor %}
if-file = /containers/{{container.uid}}/etc/uwsgi.pubkey
hook-asap = unlink:/containers/{{container.uid}}/etc/uwsgi.pubkey
endif =
{% for line in container.customer.rsa_pubkey_lines %}
hook-asap = !appendn:/containers/{{container.uid}}/etc/uwsgi.pubkey {{line}}
{% endfor %}

; create/fix ssh access
if-not-dir = /containers/{{container.uid}}/.ssh
hook-asap = mkdir:/containers/{{container.uid}}/.ssh
endif =
hook-asap = chown:/containers/{{container.uid}}/.ssh {{container.uid}} {{container.uid}}

if-file = /containers/{{container.uid}}/.ssh/uwsgi_authorized_keys
hook-asap = unlink:/containers/{{container.uid}}/.ssh/uwsgi_authorized_keys
endif =
{% for key in container.ssh_keys %}
hook-asap = !appendn:/containers/{{container.uid}}/.ssh/uwsgi_authorized_keys {{key}}
{% endfor %}

; set hostname
hook-asap = hostname:{{container.hostname}}

; force the master to consider itself 'jailed', even if jailing was managed by the main Emperor
jailed = true
; reloading does not exist for this instance (when it is changed we need to destroy the whole container)
exit-on-reload = true

; now we change the mountpoints view of the container
hook-pre-jail = callret:chdir /
hook-pre-jail = mount:none /distros/{{container.distro.path}} /ns bind

pivot_root = /ns /ns/.old_root

; mount /proc
hook-as-root = mount:proc none /proc nodev hidepid=2
; bind /dev
hook-as-root = mount:none /.old_root/dev /dev bind
; bind /dev/pts
hook-as-root = mount:none /.old_root/dev/pts /dev/pts bind
; map /containers/<uid>
hook-as-root = mount:none /.old_root/containers/{{container.uid}}/.old_root /containers bind
hook-as-root = mount:none /.old_root/containers/{{container.uid}} /containers/{{container.uid}} bind
; map /run
hook-as-root = mount:none /containers/{{container.uid}}/run /run bind,nosuid
; map /tmp
hook-as-root = mount:none /containers/{{container.uid}}/tmp /tmp bind,nosuid
hook-as-root = mount:none /containers/{{container.uid}}/tmp /var/tmp bind,nosuid
; bind /subscribe to /run/subscribe
hook-as-root = mount:none /.old_root/subscribe /run/subscribe bind
; bind /sys/fs/cgroup/<uid> to /run/cgroup
hook-as-root = mount:none /.old_root/sys/fs/cgroup/{{container.uid}} /run/cgroup bind
; umount old fs
hook-as-root = umount:/.old_root rec,detach
; remount root with nosuid
hook-as-root = mount:none none / remount,nosuid
; remount home with nosuid
hook-as-root = mount:none /containers/{{container.uid}} /containers/{{container.uid}} remount,nosuid
hook-as-root = mount:none /containers/{{container.uid}}/etc /run/resolvconf bind
; bind empty /var/log
hook-as-root = mount:none /.old_root /var/log bind,nosuid

; setup networking
hook-as-root = exec:ifconfig lo up
hook-as-root = exec:ifconfig uwsgi0 {{container.ip}} netmask 255.0.0.0 up
hook-as-root = exec:route add default gw 10.0.0.1
hook-as-root = chown:/containers/{{container.uid}}/logs/emperor.log root {{container.uid}}

tuntap-device = uwsgi0 /run/tuntap_router.socket
tuntap-use-credentials = true

; setup firewall
{% for rule in container.rules %}
tuntap-device-rule = {{rule.direction}} {{rule.src}} {{rule.dst}} {{rule.action}} {{rule.target}}
{% endfor %}
tuntap-device-rule = in 10.0.0.0/8 0.0.0.0 deny
tuntap-device-rule = out 0.0.0.0 10.0.0.0/8 deny


; finally drop privileges
uid = {{container.uid}}
gid = {{container.uid}}

logto = /containers/{{container.uid}}/logs/emperor.log


; spawn the Emperor
emperor = /containers/{{container.uid}}/vassals
emperor-stats-server = 127.0.0.1:5005

setns-socket = /run/ns.socket
setns-preopen = true

subscriptions-use-credentials = true

hook-as-user-atexit = console_broadcast:container {{container.name}} is restarting ...
